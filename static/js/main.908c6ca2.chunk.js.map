{"version":3,"sources":["logo.png","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","App","contractAddr","_useState","useState","_useState2","Object","slicedToArray","walletConnect","setWalletConnect","_useState3","_useState4","connected","setConnected","_useState5","_useState6","currentSupply","setCurrentSupply","_useState7","_useState8","maxSupply","setMaxSupply","_useState9","_useState10","mintState","setMintState","getWallet","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","_window","ethereum","provider","network","accounts","wrap","_context","prev","next","window","alert","ethers","providers","Web3Provider","getNetwork","sent","console","log","chainId","send","t0","message","stop","apply","this","arguments","useEffect","getInfo","_ref2","_callee2","_window2","signer","contract","lastToken","maxTokens","_context2","getSigner","Contract","abi","totalSupply","mintSkullz","_ref3","_callee3","_window3","options","mintTxn","_context3","gasLimit","gasPrice","mint","maxFeePerGas","maxPriorityFeePerGas","wait","hash","toString","react_default","createElement","className","src","logo","alt","cs","ms","Fragment","onClick","e","mintUi","href","target","rel","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"s+LAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gSCsLzBC,MA/Kf,WACE,IAAMC,EAAe,6CACrBC,EAA0CC,mBAAS,IAAnDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAsBI,EAAtBJ,EAAA,GACAK,EAAkCN,oBAAS,GAA3CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAOE,EAAPD,EAAA,GAAkBE,EAAlBF,EAAA,GAEAG,EAA0CV,mBAAS,IAAnDW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAOE,EAAPD,EAAA,GAAsBE,EAAtBF,EAAA,GACAG,EAAkCd,mBAAS,IAA3Ce,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAAOE,EAAPD,EAAA,GAAkBE,EAAlBF,EAAA,GACAG,EAAkClB,mBAAS,IAA3CmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAAOE,EAAPD,EAAA,GAAkBE,EAAlBF,EAAA,GAEMG,EAAS,eAAAC,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAR,EACKS,QAAbR,EADQD,EACRC,YAENS,MAAM,wBACNlC,EAAiB,yBAJH8B,EAAAC,KAAA,EAORL,EAAW,IAAIS,IAAOC,UAAUC,aAAaZ,GAPrCK,EAAAE,KAAA,EAQQN,EAASY,aARjB,cAQRX,EARQG,EAAAS,KASdC,QAAQC,IAAId,EAAQe,SACI,MAApBf,EAAQe,UACVR,MAAM,8DACNlC,EAAiB,kEAZL8B,EAAAE,KAAA,GAeSN,EAASiB,KAAK,sBAAuB,IAf9C,QAeRf,EAfQE,EAAAS,KAgBdC,QAAQC,IAAIb,EAAS,IAErB5B,EAAiB,2BAA6B4B,EAAS,GAAK,KAC5DxB,GAAa,GAnBC0B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SAqBdI,MAAMJ,EAAAc,GAAEC,SArBM,yBAAAf,EAAAgB,SAAAvB,EAAA,kBAAH,yBAAAL,EAAA6B,MAAAC,KAAAC,YAAA,GA6BfC,oBAAU,WACRC,KACC,IAEH,IAQMA,EAAO,eAAAC,EAAAvD,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAG,SAAA+B,IAAA,IAAAC,EAAA7B,EAAAC,EAAA6B,EAAAC,EAAAC,EAAAC,EAAA,OAAAtC,EAAAC,EAAAQ,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAAsB,EACOrB,OAAbR,EADM6B,EACN7B,SACFC,EAAW,IAAIS,IAAOC,UAAUC,aAAaZ,GAC7C8B,EAAS7B,EAASkC,YAClBJ,EAAW,IAAIrB,IAAO0B,SAASpE,EAAcqE,EAAKP,GAJ1CI,EAAA3B,KAAA,EAKUwB,EAASO,cALnB,cAKRN,EALQE,EAAApB,KAAAoB,EAAA3B,KAAA,EAMUwB,EAAS7C,YANnB,OAMR+C,EANQC,EAAApB,KASd/B,EAAiBiD,GACjB7C,EAAa8C,GAVC,yBAAAC,EAAAb,SAAAO,MAAH,yBAAAD,EAAAL,MAAAC,KAAAC,YAAA,GAoCPe,EAAU,eAAAC,EAAApE,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAG,SAAA4C,IAAA,IAAAC,EAAA1C,EAAAC,EAAA6B,EAAAC,EAAAY,EAAAC,EAAA,OAAAjD,EAAAC,EAAAQ,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAvC,KAAA,EAAAoC,EAEMlC,OAAbR,EAFO0C,EAEP1C,SACFC,EAAW,IAAIS,IAAOC,UAAUC,aAAaZ,GAC7C8B,EAAS7B,EAASkC,YAClBJ,EAAW,IAAIrB,IAAO0B,SAASpE,EAAcqE,EAAKP,GACxDvC,EAAa,uBAEPoD,EAAU,CAAEG,SAAU,KAAQC,SAAU,KAR/BF,EAAAtC,KAAA,EASKwB,EAASiB,KAAKL,GATnB,cASXC,EATWC,EAAA/B,MAUPmC,aAAe,EACvBL,EAAQM,qBAAuB,EAC/B3D,EAAa,wBAZEsD,EAAAtC,KAAA,GAaTqC,EAAQO,OAbC,QAcf5D,EAAa,kBAAoBqD,EAAQQ,MAd1BP,EAAAtC,KAAA,iBAAAsC,EAAAvC,KAAA,GAAAuC,EAAA1B,GAAA0B,EAAA,SAgBf9B,QAAQC,IAAI6B,EAAA1B,GAAEC,QAAQiC,YACtB9D,EAAasD,EAAA1B,GAAEC,QAAQiC,YAjBR,yBAAAR,EAAAxB,SAAAoB,EAAA,kBAAH,yBAAAD,EAAAlB,MAAAC,KAAAC,YAAA,GAqBhB,OACE8B,EAAA1D,EAAA2D,cAAA,OAAKC,UAAU,OACbF,EAAA1D,EAAA2D,cAAA,UAAQC,UAAU,cAChBF,EAAA1D,EAAA2D,cAAA,2BACAD,EAAA1D,EAAA2D,cAAA,KAAGC,UAAU,qBAAb,mDAGAF,EAAA1D,EAAA2D,cAAA,WACED,EAAA1D,EAAA2D,cAAA,OAAKE,IAAMC,IAAOC,IAAI,UAN1B,wBASEL,EAAA1D,EAAA2D,cAAA,WACAD,EAAA1D,EAAA2D,cAAA,SACI7E,EAzDK,WACb,IAIE,IAAMkF,EAAK9E,EAAcuE,WACnBQ,EAAK3E,EAAUmE,WAIrB,OAFAtC,QAAQC,IAAI6C,GACZ9C,QAAQC,IAAI4C,GAEVN,EAAA1D,EAAA2D,cAAAD,EAAA1D,EAAAkE,SAAA,wBACoBF,EADpB,MAC6BC,EAC3BP,EAAA1D,EAAA2D,cAAA,WAAKD,EAAA1D,EAAA2D,cAAA,WACLD,EAAA1D,EAAA2D,cAAA,UAAQQ,QAAUxB,GAAlB,SAGJ,MAAOyB,GAEP,OADAvD,MAAMuD,GACGA,EAAE5C,QAAQiC,YAsCDY,GA5ElBX,EAAA1D,EAAA2D,cAAA,UAAQQ,QAAUvE,GAAlB,sBA8EE8D,EAAA1D,EAAA2D,cAAA,WACAD,EAAA1D,EAAA2D,cAAA,KAAGC,UAAU,eACTlF,GAEJgF,EAAA1D,EAAA2D,cAAA,KAAGC,UAAU,cACTlE,GAEJgE,EAAA1D,EAAA2D,cAAA,OAAKC,UAAU,eACbF,EAAA1D,EAAA2D,cAAA,8JAIAD,EAAA1D,EAAA2D,cAAA,sFAGAD,EAAA1D,EAAA2D,cAAA,oOAKAD,EAAA1D,EAAA2D,cAAA,iFAGAD,EAAA1D,EAAA2D,cAAA,sJAIAD,EAAA1D,EAAA2D,cAAA,mJAKFD,EAAA1D,EAAA2D,cAAA,KACEC,UAAU,WACVU,KAAK,8CACLC,OAAO,SACPC,IAAI,uBAJN,yBAQAd,EAAA1D,EAAA2D,cAAA,WACAD,EAAA1D,EAAA2D,cAAA,KAAGC,UAAU,WACXU,KAAK,oCACLC,OAAO,SACPC,IAAI,uBAHN,qBC9JOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC1G,EAAAmG,EAAA,GAAAQ,KAAA3G,EAAA4G,KAAA,UAAqBD,KAAK,SAAA/E,GAAiD,IAA9CiF,EAA8CjF,EAA9CiF,OAAQC,EAAsClF,EAAtCkF,OAAQC,EAA8BnF,EAA9BmF,OAAQC,EAAsBpF,EAAtBoF,OAAQC,EAAcrF,EAAdqF,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDdS,IAASC,OACP1B,EAAA1D,EAAA2D,cAACD,EAAA1D,EAAMqF,WAAP,KACE3B,EAAA1D,EAAA2D,cAAC2B,EAAD,OAEFC,SAASC,eAAe,SAM1Bf","file":"static/js/main.908c6ca2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1b8d2da6.png\";","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './abi.json';\nimport logo from './logo.png';\n\nfunction App() {\n  const contractAddr = '0xe3e1348736D2c76c370A9ef0F6b5b20B7DfD880B';\n  const [walletConnect, setWalletConnect] = useState('');\n  const [connected, setConnected] = useState(false);\n  //const [svg, setSvg] = useState('');\n  const [currentSupply, setCurrentSupply] = useState('');\n  const [maxSupply, setMaxSupply] = useState('');\n  const [mintState, setMintState] = useState('');\n\n  const getWallet = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert('pls install metamask');\n      setWalletConnect('pls install metamask');\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const network = await provider.getNetwork();\n      console.log(network.chainId);\n      if (network.chainId !== 137) {\n        alert('pls set network to polygon mainnet in metamask to continue');\n        setWalletConnect('error, pls connect to polygon mainnet in metamask and refresh');\n      }\n      //var accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      const accounts = await provider.send('eth_requestAccounts', []);\n      console.log(accounts[0]);\n      //var balance = await provider.getBalance(accounts[0]);\n      setWalletConnect('Connected with address: ' + accounts[0] + '.');\n      setConnected(true);\n    } catch(e) {\n      alert(e.message);\n    }\n  }\n\n  //useEffect(() => {\n  //  getWallet();\n  //}, [])\n\n  useEffect(() => {\n    getInfo();\n  }, [])\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={ getWallet }>\n        Connect to wallet\n      </button>\n    );\n  }\n\n  const getInfo = async () => {\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddr, abi, signer);\n    const lastToken = await contract.totalSupply();\n    const maxTokens = await contract.maxSupply();\n    //const lastSvg = await contract.buildSvg(lastToken);\n    //setSvg(lastSvg);\n    setCurrentSupply(lastToken);\n    setMaxSupply(maxTokens);\n  }\n\n  const mintUi = () => {\n    try {\n      //const buff = new Buffer(svg);\n      //const base64data = buff.toString('base64');\n      //const imgSrc = 'data:image/svg+xml;base64,' + base64data.toString();\n      const cs = currentSupply.toString();\n      const ms = maxSupply.toString();\n      //console.log(imgSrc);\n      console.log(ms);\n      console.log(cs);\n      return (\n        <>\n          Current supply: { cs } / { ms }\n          <br/><br/>\n          <button onClick={ mintSkullz }>Mint</button>\n        </>\n      );\n    } catch (e) {\n      alert(e);\n      return ( e.message.toString() );\n    }\n  }\n\n  const mintSkullz = async () => {\n    try {\n      const { ethereum } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddr, abi, signer);\n      setMintState(\"Calling Metamask...\");\n      //const options = { maxFeePerGas: 5000000000, maxPriorityFeePerGas: 5000000000 }\n      const options = { gasLimit: 250000, gasPrice: 4000000000 }\n      let mintTxn = await contract.mint(options);\n      mintTxn.maxFeePerGas = 5;\n      mintTxn.maxPriorityFeePerGas = 5;\n      setMintState(\"Minting, pls wait...\");\n      await mintTxn.wait();\n      setMintState('Complete, txn: ' + mintTxn.hash);\n    } catch (e) {\n      console.log(e.message.toString())\n      setMintState(e.message.toString());\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h4>Motley Skullz</h4>\n        <p className='smallerTextCenter'>\n          A fully on-chain generative vector art project.\n        </p>\n        <div>\n          <img src={ logo } alt=\"logo\"></img>\n        </div>\n        Free mint on polygon.\n        <br/>\n        <p>\n          { connected ? mintUi() : connectWalletButton() }\n        </p>\n        <br/>\n        <p className='smallerText'>\n          { walletConnect }\n        </p>\n        <p className='mintStatus'>\n          { mintState }\n        </p>\n        <div className='smallerText'>\n          <p>\n            Motley Skullz are a fully on chain generative collection of vector art.\n            This is a public domain project, free mint on Polygon blockchain for all.\n          </p>\n          <p>\n            All skullz have hidden mechanic, can you find what it is? Hint: contract.\n          </p>\n          <p>\n            The contract supports adding traits (eyes, noses, shapes), feel free to reach me on\n            twitter, if you have an idea for a trait, or if you are into vector art, send\n            seme shapes my way and I'll add them to the contract.\n          </p>\n          <p>\n            If you like the project, any kind of support is greatly appreciated.\n          </p>\n          <p>\n            Contract code verified, website hosted on github pages, feel free to\n            reach me on twitter if interested in details or sharing ideas etc :)\n          </p>\n          <p>\n            Note: gas price is set to 4 gwei, with current conditions it works decently\n            enough, however, pls override as you see fit in metamask.\n          </p>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://opensea.io/collection/motley-skullz\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Collection on OpenSea\n        </a>\n        <br/>\n        <a className=\"App-link\"\n          href=\"https://twitter.com/smilingdrag0n\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          @smilingdrag0n\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}